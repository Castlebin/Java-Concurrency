package leetcode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.junit.Test;

/**
 15. 3Sum
 Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

 Note: The solution set must not contain duplicate triplets.

 For example, given array S = [-1, 0, 1, 2, -1, -4],

 A solution set is:
 [
 [-1, 0, 1],
 [-1, -1, 2]
 ]

 */
public class N015 {

    private int[] nums = new int[] {-1, 0, 1, 2, -1, -4};
    
    int[] n = new int[] {0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,0,0,0,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,0,0,0};
    int[] n2 = new int[] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        }
        Set<String> set = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int c = -(nums[i] + nums[j]);
                if (map.containsKey(c) && map.get(c) > j) {
                    String s = nums[i] + "_" + nums[j] + c;
                    if (!set.contains(s)) {
                        result.add(Arrays.asList(nums[i], nums[j], c));
                        set.add(s);
                    }
                }
            }
        }

        return result;
    }

    @Test
    public void test() {
        System.out.println(n.length);
        System.out.println(n2.length);
        System.out.println(threeSum(nums));
        System.out.println(threeSum(n));
        System.out.println(threeSum(n2));
    }

}
