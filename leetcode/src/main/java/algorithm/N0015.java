package algorithm;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.junit.Test;

/**
 15. 3Sum
 Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

 Note: The solution set must not contain duplicate triplets.

 For example, given array S = [-1, 0, 1, 2, -1, -4],

 A solution set is:
 [
 [-1, 0, 1],
 [-1, -1, 2]
 ]

 */
public class N0015 {

    private int[] nums = new int[] {-1, 0, 1, 2, -1, -4};
    
    int[] n = new int[] {0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,0,0,0,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,1,-1,0,-1,-1,0,-1,1,0,-1,0,0,0,0};
    int[] n2 = new int[] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        if (nums == null || nums.length <= 2) {
            return ans;
        }
        int n = nums.length;
        Arrays.sort(nums);
        for (int first = 0; nums[first] <= 0 && first < n - 2; first++) {
            // 不能与上一个元素相同
            if (first > 0 && nums[first] == nums[first - 1]) {
                continue;
            }
            int third = n - 1;
            int target = -nums[first];
            for (int second = first + 1; second < third; second++) {
                // 不能与上一个选择的元素相同
                if (second > first + 1 && nums[second] == nums[second - 1]) {
                    continue;
                }
                while (second < third && nums[second] + nums[third] > target) {
                    third--;
                }
                if (second == third) {
                    break;
                }
                if (nums[second] + nums[third] == target) {
                    List<Integer> match = new ArrayList<>();
                    match.add(nums[first]);
                    match.add(nums[second]);
                    match.add(nums[third]);
                    ans.add(match);
                }
            }
        }

        return ans;
    }

    @Test
    public void test() {
        System.out.println(n.length);
        System.out.println(n2.length);
        System.out.println(threeSum(nums));
        System.out.println(threeSum(n));
        System.out.println(threeSum(n2));
    }

}
